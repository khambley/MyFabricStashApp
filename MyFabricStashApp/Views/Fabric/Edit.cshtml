@model MyFabricStashApp.Models.Fabric
@{
    ViewBag.Title = "Edit Fabric";
}
@using (Html.BeginForm("Edit", "Fabric", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h3>Edit Fabric: @Model.Name</h3>
    Item#: @Model.ItemNumber
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.FabricId)
    <div class="row">
        <div class="col-md-4">
            <h4 class="bold">Categories: @Model.MainCategory.Name / @Model.SubCategory1.Name</h4>
        </div>
        <div class="col-md-3">
            <h4 class="underline">Current Qty: @Model.TotalInches inches</h4>
        </div>
    </div>
    <hr />
    <div class="form-group">
        <label class="control-label col-md-2">Fabric Swatch</label>
        <div class="col-md-10">
            <div>
                @if (Model.ImagePath != null)
                {
                    <img id="user_img" src="/images/@Model.ImagePath" width="100" />
                    if (Model.ImagePath2 != null)
                    {
                        <img id="user_img2" src="/images/@Model.ImagePath2" width="100" />
                    }
                }
                else
                {
                    <img id="user_img" width="100" /> <img id="user_img2" width="100" />
                }
            </div>
            <br />
            <input type="file" title="Upload Image" name="file" id="file1" value="@Model.ImagePath" onchange="show(this)" /><br />
            @Model.ImagePath
            @*@Html.TextBoxFor(model => model.ImagePath, new { type = "file" })*@
            @Html.ValidationMessageFor(model => model.ImagePath, "", new { @class = "text-danger" })
            @*<input type="file" title="Upload Image 2" name="files" id="file2" onchange="show(this)" />
                @Html.ValidationMessageFor(model => model.ImagePath2, "", new { @class = "text-danger" })*@
            <script type="text/javascript">
                function show(input) {
                    if (input.files && input.files[0]) {
                        var filereader = new FileReader();
                        filereader.onload = function (e) {
                            $('#user_img').attr('src', e.target.result);
                            //$('#user_img2').attr('src', e.target.result);
                        };
                        filereader.readAsDataURL(input.files[0]);
                    }
                }
            </script>
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Main Category</label>
        @Html.Partial("_ChooseCategory")
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">Sub Category</label>
        <div class="col-md-10">
            @Html.DropDownList("SubCategory1Id", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SubCategory1Id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Source, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Source, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">New Qty(inches)</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.TotalInches, new { htmlAttributes = new { @class = "form-control short-width" } })
            @Html.ValidationMessageFor(model => model.TotalInches, "", new { @class = "text-danger" })
        </div>
    </div>
    @*<div class="form-group">
            <label class="control-label col-md-2">Add Qty(+) in inches</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddQuantity, new { htmlAttributes = new { @class = "form-control short-width" } })
                @Html.ValidationMessageFor(model => model.AddQuantity, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Minus Qty(-) in inches</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.MinusQuantity, new { htmlAttributes = new { @class = "form-control short-width" } })
                @Html.ValidationMessageFor(model => model.MinusQuantity, "", new { @class = "text-danger" })
            </div>
        </div>*@

    @Html.EditorFor(model => model.TotalInches, new { htmlAttributes = new { @class = "form-control hidden" } })
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
    }

